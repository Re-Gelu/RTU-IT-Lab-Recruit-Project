# Generated by Django 4.0.8 on 2023-05-03 05:36

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import shortuuid.django_fields
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventRegistrations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shortuuid', shortuuid.django_fields.ShortUUIDField(alphabet='0123456789', auto_created=True, length=10, max_length=10, prefix='', unique=True, verbose_name='UUID записи на мероприятие')),
                ('is_invitation_accepted', models.BooleanField(blank=True, default=False, null=True, verbose_name='Принял ли пользователь приглашение на мероприятие')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации на мероприятие')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления регистрации на мероприятие')),
            ],
        ),
        migrations.CreateModel(
            name='EventTypes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование типа мероприятия')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания типа мероприятия')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления типа мероприятия')),
            ],
            options={
                'verbose_name': 'тип мероприятия',
                'verbose_name_plural': 'Типы мероприятий',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='EventVenues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование места проведения мероприятия')),
                ('address', models.CharField(blank=True, max_length=200, null=True, verbose_name='Адрес места проведения мероприятия')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Координата широты для места проведения мероприятия')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Координата долготы для места проведения мероприятия')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания места проведения мероприятия')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления места проведения мероприятия')),
            ],
            options={
                'verbose_name': 'место проведения мероприятия',
                'verbose_name_plural': 'Места проведения мероприятий',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='PrivateEventRegistrations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shortuuid', shortuuid.django_fields.ShortUUIDField(alphabet='0123456789', auto_created=True, length=10, max_length=10, prefix='', unique=True, verbose_name='UUID записи на мероприятие')),
                ('is_invitation_accepted', models.BooleanField(blank=True, default=False, null=True, verbose_name='Принял ли пользователь приглашение на мероприятие')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации на мероприятие')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления регистрации на мероприятие')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование мероприятия')),
                ('image', models.ImageField(blank=True, default='events_images/placeholder.jpg', null=True, upload_to='events_images/', verbose_name='Изображение для мероприятия')),
                ('start_datetime', models.DateTimeField(verbose_name='Время проведения мероприятия')),
                ('duration', models.DurationField(blank=True, default=datetime.timedelta(seconds=7200), max_length=datetime.timedelta(days=31), null=True, verbose_name='Длительность мероприятия')),
                ('closing_registration_date', models.DateTimeField(verbose_name='Время закрытия регистрации на мероприятие')),
                ('short_information', models.TextField(blank=True, max_length=200, null=True, verbose_name='Краткая информация о мероприятии')),
                ('full_information', tinymce.models.HTMLField(blank=True, null=True, verbose_name='Полная информация о мероприятии')),
                ('max_visitors', models.PositiveIntegerField(default=0, verbose_name='Максимум посетителей')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления мероприятия')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления мероприятия')),
                ('category_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.eventtypes', verbose_name='Тип приватного мероприятия')),
                ('venue_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.eventvenues', verbose_name='Место проведения приватного мероприятия')),
                ('visitors', models.ManyToManyField(blank=True, through='events.PrivateEventRegistrations', to=settings.AUTH_USER_MODEL, verbose_name='Зарегестрированные на приватное мероприятие пользователи')),
            ],
            options={
                'verbose_name': 'приватное мероприятие',
                'verbose_name_plural': 'Приватные мероприятия',
            },
        ),
        migrations.AddField(
            model_name='privateeventregistrations',
            name='private_event_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.privateevents', verbose_name='ID приватного мероприятия'),
        ),
        migrations.AddField(
            model_name='privateeventregistrations',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ID пользователя'),
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование мероприятия')),
                ('image', models.ImageField(blank=True, default='events_images/placeholder.jpg', null=True, upload_to='events_images/', verbose_name='Изображение для мероприятия')),
                ('start_datetime', models.DateTimeField(verbose_name='Время проведения мероприятия')),
                ('duration', models.DurationField(blank=True, default=datetime.timedelta(seconds=7200), max_length=datetime.timedelta(days=31), null=True, verbose_name='Длительность мероприятия')),
                ('closing_registration_date', models.DateTimeField(verbose_name='Время закрытия регистрации на мероприятие')),
                ('short_information', models.TextField(blank=True, max_length=200, null=True, verbose_name='Краткая информация о мероприятии')),
                ('full_information', tinymce.models.HTMLField(blank=True, null=True, verbose_name='Полная информация о мероприятии')),
                ('max_visitors', models.PositiveIntegerField(default=0, verbose_name='Максимум посетителей')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления мероприятия')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления мероприятия')),
                ('category_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.eventtypes', verbose_name='Тип мероприятия')),
                ('venue_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.eventvenues', verbose_name='Место проведения мероприятия')),
                ('visitors', models.ManyToManyField(blank=True, through='events.EventRegistrations', to=settings.AUTH_USER_MODEL, verbose_name='Зарегестрированные на мероприятие пользователи')),
            ],
            options={
                'verbose_name': 'мероприятие',
                'verbose_name_plural': 'Мероприятия',
                'ordering': ('name',),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='eventregistrations',
            name='event_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.events', verbose_name='ID мероприятия'),
        ),
        migrations.AddField(
            model_name='eventregistrations',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ID пользователя'),
        ),
        migrations.AddConstraint(
            model_name='privateeventregistrations',
            constraint=models.UniqueConstraint(fields=('private_event_id', 'user_id'), name='private_event_user_id_unique'),
        ),
        migrations.AlterUniqueTogether(
            name='privateeventregistrations',
            unique_together={('private_event_id', 'user_id')},
        ),
        migrations.AddConstraint(
            model_name='eventregistrations',
            constraint=models.UniqueConstraint(fields=('event_id', 'user_id'), name='event_user_id_unique'),
        ),
        migrations.AlterUniqueTogether(
            name='eventregistrations',
            unique_together={('event_id', 'user_id')},
        ),
    ]
